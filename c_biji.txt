通过声明C函数为外部的，可以把他们集成于C++中，而且，并不需要逐个声明函数，可以一次把整个文件声明为外部的

格式如下：
#ifndef _IMOS_MW_SDK_TYPEDEF_H_
#define _IMOS_MW_SDK_TYPEDEF_H_

#ifdef  __cplusplus
extern "C"{
#endif

typedef IMOS_MW_USER_LOGIN_ID_INFO_S USER_LOGIN_ID_INFO_S;
typedef IMOS_MW_CAMERA_INFO_S			CAMERA_INFO_S;
typedef IMOS_MW_EC_INFO_S				EC_INFO_S;
typedef IMOS_MW_DEV_CHANNEL_INDEX_S		DEV_CHANNEL_INDEX_S;
typedef IMOS_MW_VIN_CHANNEL_S			VIN_CHANNEL_S;
typedef IMOS_MW_VIDEO_STREAM_S			VIDEO_STREAM_S;
typedef IMOS_MW_OSD_TIME_S				OSD_TIME_S;
typedef IMOS_MW_OSD_NAME_S				OSD_NAME_S;
typedef IMOS_MW_VIDEO_AREA_S			VIDEO_AREA_S;
typedef IMOS_MW_SERIAL_INFO_S			SERIAL_INFO_S;
typedef IMOS_MW_SEMA_INPUT_INFO_S		SEMA_INPUT_INFO_S;
typedef IMOS_MW_SEMA_OUTPUT_INFO_S		SEMA_OUTPUT_INFO_S;
typedef IMOS_MW_PRESET_INFO_S			PRESET_INFO_S;
typedef IMOS_MW_PTZ_CTRL_COMMAND_S		PTZ_CTRL_COMMAND_S;
 
中间为声明
#ifdef  __cplusplus
}
#endif /* end of __cplusplus */

#endif


二、
测量时间和复杂性
 O(n)
 O(n^2)
 字母n代表算法所要处理的数据元素的数量
第一个算法复杂性是一个以算法处理的数据元素为变量的正比函数。也就是说，如果查找包含1000个数据元素的数据库需要1秒，则查找包含2000个数据元素的数据库需要
2秒。这也意味着数据量增大到三倍，查找时间也要增加到三倍。关于O(n)算法的一个实例时处理过程中对每个数据元素进行相同次数处理的算法。例如：从头到尾遍历一个链表或数组

第二个实例O(n^2)中算法耗时和数据元素数量的平方成正比，数据量增大到2倍时，耗时要增加到四倍
O（log2n）   O(n)  O(nlog2n)  O(n^2)  O(2^n)
nlog2n中的第一个n很好解释，表示需要处理所有元素。而log2n表示算法根据待处理元素的位置把所有数据分成两组，再把包含该元素的一组分成两小组，然后再分，直到达到该元素。
关于O符号的最后说明：
1、比较不同的O(n)表达式时，常量已经证明无影响，可以忽略。与O(n)相比较时，O(2n^2)和O(9n^2)都可看成O(n^2)
2、计算由不同复杂性算法而组成的算法的复杂性时，取复杂性最高的算法的复杂性。
3、嵌套算法创建的算法的复杂性为各算法复杂性的乘积

二、二
计时函数

三、变量的使用
 我们需要注意除了除法运算外，其他运算中整数运算速度都非常快，这是因为在除法运算中整数要进行多次转换。因此，为了决定是否使用整数代替float和double,程序员必须确定各种运算可能使用的次数。一段程序中乘法 加法 减法运算经常用到浮点型变量，使用整数代替就比较理想

结构体对齐的方式
#pragma pack(push,1) #设置对齐方式为1
struct C{char a;long b;char c;long d}
#pragma pack(pop)   接触对齐方式为1
sizeof(C)  10 

对齐原因：有些处理器在使用奇数地址时存在困难。如果移植使用对齐调整后的代码，程序内存占用情况会发生变化，甚至变量存取速度会减慢。因此开发人员应认识到对齐调整是属于特定系统内优化的问题，肯定会受到目标系统的限制

比特域
struct BitField
{
   unsigned rangeAOne :11;
   unsigned rangeATwo :11;
   unsigned rangeBOne :10;
   unsigned rangeAThree :11;
   unsigned rangeAFour  :11;
   unsigned rangeBTwo   :10;
}
编译器会把整个结构压缩在两个long word（short）中，因此BitField结构为8个字节。编译器可以进行这种处理，因为使用了比特域后，对于rangeAxx变量只分配11比特，对于rangeBxx变量只分配10比特。通过使结构内的变量合理排列，可以确保实现最佳存储。结构内变量顺序非常重要也和对齐方式有关。基本类型的比特位是按照定义变量顺序分配的。但是，当一个变量所需要的比特数大于基本类型剩余的比特数时，就会把它存在到下一个基本类型中。










